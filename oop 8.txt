'''
FairyLand Multiplex" wants to automate ticket booking and seat allocation process.
Write a python program to implement the class diagram given below.

class diag:
ApplicaNT
----------------
-APPLICATION DICT->static
-applicant id count->static
-applicant id
-applicant name
-job BAND
------------------
__init__(applicant name)
+apply for job(job band)
+generate apoplicant id
+all getters
------------------

Method description:
1.check_seat_availability(movie_index,number_of_tickets): Checks seat availability for the given movie. Refer the code given in starter code
2.calculate_ticket_price(movie_index,number_of_tickets): Calculates total ticket price for the given movie. Refer the code given in starter code
3.generate_seat_number(movie_index,number_of_tickets): Allocate required number of seats for the given movie.
	a. Seat numbers should be auto-generated as mentioned below:
		seat numbers should be generated starting from 1, prefixed by "M1-" for movie-1 and "M2-" for movie 2
		Examples movie-1: M1-1, M1-2, M1-3 etc, movie-2: M2-1,M2-2 etc
	b. Update total number of tickets available for the given movie in list_total_tickets
	c. Update last seat number allocated for the given movie in list_last_seat_number
	d. Return the list of generated seat numbers
4.book_ticket(movie_name,number_of_tickets): Book tickets for the given movie.
	a. Return 0, if movie name is invalid
	b. Return -1, if enough tickets are not available for the given movie
	c. Else,
		Generate seat numbers
		Initialize attribute, seat_numbers with the list of generated seat numbers
		Calculate total ticket price
Perform case sensitive string comparison.

'''

#OOP-Assgn-12
class Multiplex:
    __list_movie_name=["movie1","movie2"]
    __list_total_tickets=[90,50]
    __list_last_seat_number=[None,None]
    __list_ticket_price=[150,200]
    
    def __init__(self):
        self.__seat_numbers=None
        self.__total_price=None
        self.__counter = 1
        
    def calculate_ticket_price(self,movie_index,number_of_tickets):
        self.__total_price= Multiplex.__list_ticket_price[movie_index]*number_of_tickets
        
        
    def check_seat_availability(self,movie_index,number_of_tickets):
        if(Multiplex.__list_total_tickets[movie_index]<number_of_tickets):
            return False
        else:
            return True
        
    def get_total_price(self):
        return self.__total_price
    def get_seat_numbers(self):
        return self.__seat_numbers
    
    def book_ticket(self, movie_name, number_of_tickets):
        index1 = Multiplex.__list_movie_name.index(movie_name)
        if movie_name.lower() not in Multiplex.__list_movie_name:
            return 0
        elif Multiplex.__list_total_tickets[index1]<number_of_tickets:
            return -1    
        else:
            self.__seat_numbers=self.generate_seat_number(index1, number_of_tickets)
            self.calculate_ticket_price(index1, number_of_tickets)
        
    def generate_seat_number(self,movie_index, number_of_tickets):
        self.__seat_numbers=[]
        num = 1
        if Multiplex.__list_last_seat_number[movie_index] != None:
            num = int(Multiplex.__list_last_seat_number[movie_index][3:])+1
        while(number_of_tickets > 0):
            self.__seat_numbers.append("M"+str(movie_index+1)+"-"+str(num))
            num += 1
            number_of_tickets -= 1
            Multiplex.__list_total_tickets[movie_index] -= 1
        return self.__seat_numbers

booking1=Multiplex()
status=booking1.book_ticket("movie1",6)
if(status==0):
    print("invalid movie name")
elif(status==-1):
    print("Tickets not available for movie-1")
else:
    print("Booking successful")
    print("Seat Numbers :", booking1.get_seat_numbers())
    print("Total amount to be paid:", booking1.get_total_price())
print("-----------------------------------------------------------------------------")
# booking2=Multiplex()
# status=booking2.book_ticket("movie2",6)
# if(status==0):
#     print("invalid movie name")
# elif(status==-1):
#     print("Tickets not available for movie-2")
# else:
#     print("Booking successful")
#     print("Seat Numbers :", booking2.get_seat_numbers())
#     print("Total amount to be paid:", booking2.get_total_price())