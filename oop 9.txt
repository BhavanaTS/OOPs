'''
Class Description: 
Bill class:
Initialize static variable counter to 1000
generate_bill_amount(item_quantity,items): Calculate bill amount based on the items purchased by the customer
Accept a dictionary, item_quantity which contains the item id (key) of the items purchased along with the quantity (value)
Accept a list, items which contains the list of Item objects available in the store
Generate bill id starting from 1001 prefixed by "B" and initialize attribute, bill_id. Ex. "B1001", "B1002" etc.
Calculate bill amount based on the quantity and price of the items purchased by the customer
Set attribute, bill_amount with the calculated bill amount
Assume that values in item_quantity and items are always valid. 
Customer class:
pays_bill(bill): Pay bill based on the bill amount

Accept Bill object which contains the details of the bill to be paid by the customer
Update attribute, payment_status to "Paid"
Display customer name, bill id and bill amount
Note: Perform case insensitive string comparison

For testing:
Create objects of Customer class, Item class and Bill class
Invoke generate_bill_amount(item_quantity,items) on Bill object by passing the dictionary containing item_id and quantity of items purchased by the Customer and list of Item objects
Invoke pays_bill() on Customer object by passing the Bill object

customer				bill							item					
----------------------		-------------------					-----------------------
-customer name		------- -bill id		------------------------------- -item id
-payment status			-bill amount						-dewscription
-----------------------		+counter->static					-price per quantity
+all getters			--------------------					------------------------
__init__(customer name)		all getter						__init__(item id,description,price per quantity)
+pays_bill(bill)		+generate bill amount(item_quantity,items)		all getters
-----------------------   	__init__()						------------------------------------------------
				-------------------------------------------
all have use a relationship


'''


#OOP-Assgn-20

class Customer:
    def __init__(self,customer_name):
        self.__customer_name=customer_name
        self.__payment_status=None

    def get_customer_name(self):
        return self.__customer_name


    def get_payment_status(self):
        return self.__payment_status

    def pays_bill(self,bill):
        self.bill=bill
        self.__payment_status="Paid"
        return(self.__customer_name+" "+str(bill.get_bill_id())+" "+str(bill.get_bill_amount()))
        
    
class Bill:
    counter=1000
    def __init__(self):
        self.__bill_id=None
        self.__bill_amount=0
        Bill.counter+=1

    def get_bill_id(self):
        return self.__bill_id


    def get_bill_amount(self):
        return self.__bill_amount

    def generate_bill_amount(self,item_quantity,items):
        item_quantity = {x.upper():y for x,y in item_quantity.items()}
        self.__bill_id="B"+str(Bill.counter)
        for i in items:
            if i.get_item_id().upper() in item_quantity.keys():
                ind = i.get_item_id().upper()
                self.__bill_amount += item_quantity[ind]*i.get_price_per_quantity()
            
class Item:
    def __init__(self,item_id,description,price_per_quantity):
        self.__item_id=item_id
        self.__description=description
        self.__price_per_quantity=price_per_quantity

    def get_item_id(self):
        return self.__item_id

    def get_description(self):
        return self.__description

    def get_price_per_quantity(self):
        return self.__price_per_quantity


i1=Item("ir987","sad",20)
i2=Item("Ir658","sadsdf",25)
i3=Item("iR346","sdfsd",12)
i4=Item("iR346","sdfsd",12)
items=[i1,i2,i3,i4]
item_dict={'IR346':2, 'Ir987':3, 'IR658':4, 'IR123':2}
b=Bill()
b.generate_bill_amount(item_dict,items)
p=Customer("Bhavana")
print(p.pays_bill(b))
